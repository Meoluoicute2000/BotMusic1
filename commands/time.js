const { EmbedBuilder } = require('discord.js');
const db = require("../mongoDB");

module.exports = {
  name: "time",
  description: "Hi·ªÉn th·ªã th·ªùi gian ƒëang ph√°t c·ªßa b√†i h√°t.",
  permissions: "0x0000000000000800",
  options: [],
  run: async (client, interaction) => {
    try {
      // L·∫•y h√†ng ƒë·ª£i ph√°t nh·∫°c c·ªßa m√°y ch·ªß t·ª´ client
      const queue = client.player.getQueue(interaction.guild.id);

      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ h√†ng ƒë·ª£i ho·∫∑c kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ho·∫∑c h√†ng ƒë·ª£i tr·ªëng
      if (!queue || !queue.playing || !queue.songs.length) {
        return interaction.reply({ content: '‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t !!', ephemeral: true }).catch(console.error);
      }

      // L·∫•y th√¥ng tin c·ªßa b√†i h√°t ƒëang ph√°t
      const currentSong = queue.songs[0];

      // ƒê·ªô d√†i c·ªßa thanh ti·∫øn tr√¨nh
      const progressBarLength = 15;

      // G·ª≠i tin nh·∫Øn v√† l∆∞u l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t
      let message = await interaction.reply({ content: 'ƒêang t·∫£i th·ªùi gian th·ª±c c·ªßa b√†i h√°t...', ephemeral: false });

      // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
      const updateInterval = 1000;
      const progressBarUpdate = setInterval(async () => {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ b√†i h√°t n√†o trong h√†ng ƒë·ª£i
        if (!currentSong) {
          clearInterval(progressBarUpdate);
          return message.edit({ content: '‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t !!', embeds: [] }).catch(console.error);
        }

        // T√≠nh to√°n ph·∫ßn trƒÉm ti·∫øn tr√¨nh c·ªßa b√†i h√°t
        const music_percent = currentSong.duration / 100;
        const music_percent2 = queue.currentTime / music_percent;
        const music_percent3 = Math.round(music_percent2);

        // Ki·ªÉm tra n·∫øu ƒë√£ ph√°t h·∫øt b√†i h√°t
        if (queue.currentTime > currentSong.duration) {
          clearInterval(progressBarUpdate);
          return;
        }

        // T·∫°o thanh ti·∫øn tr√¨nh
        const progressBar = createProgressBar(music_percent3, progressBarLength);

        // T·∫°o Embed m·ªõi ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin th·ªùi gian ph√°t
        const embed = new EmbedBuilder()
          .setColor(client.config.embedColor)
          .setTitle(currentSong.name)
          .setThumbnail(currentSong.thumbnail || 'URL_M·∫∂C_ƒê·ªäNH')
          .setDescription(`**${queue.playing ? 'üéµ' : '‚è∏Ô∏è'} „Äå${formatTime(queue.currentTime)} | ${formatTime(currentSong.duration)}„Äç**\n${progressBar}`)
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();

        // N·∫øu c√≥ tin nh·∫Øn tr∆∞·ªõc ƒë√≥, c·∫≠p nh·∫≠t n√≥ v·ªõi Embed m·ªõi
        if (message) {
          message = await message.edit({ embeds: [embed] }).catch(console.error);
        }

      }, updateInterval);

    } catch (error) {
      // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
      console.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh Time:', error);
      // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng v·ªõi th√¥ng b√°o l·ªói
      interaction.reply({ content: '‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh n√†y!', ephemeral: true }).catch(console.error);
    }
  },
};

// H√†m t·∫°o thanh ti·∫øn tr√¨nh
function createProgressBar(percent, length) {
  if (!percent || isNaN(percent)) {
    percent = 0;
  }

  const progressChars = '‚ñ¨';
  const emptyChars = '¬∑';
  const progressLength = Math.round((percent / 100) * length);

  const progressBar = progressChars.repeat(progressLength) + emptyChars.repeat(length - progressLength);
  return `[${progressBar}] ${percent}%`;
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
function formatTime(time) {
  const hours = Math.floor(time / 3600);
  const minutes = Math.floor((time % 3600) / 60);
  const seconds = Math.floor(time % 60);

  const formattedHours = hours.toString().padStart(2, '0');
  const formattedMinutes = minutes.toString().padStart(2, '0');
  const formattedSeconds = seconds.toString().padStart(2, '0');

  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
}