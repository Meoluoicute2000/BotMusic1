const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const db = require("../mongoDB");

module.exports = {
  name: "rewind",
  description: "Tua ƒëo·∫°n nh·∫°c ƒë·∫øn th·ªùi gian c·ª• th·ªÉ.",
  permissions: "0x0000000000000800",
  options: [{
    name: "time",
    description: "Nh·∫≠p timestamp. V√≠ d·ª• : 05:10.",
    type: ApplicationCommandOptionType.String,
    required: true
  }],
  voiceChannel: true,
  run: async (client, interaction) => {
    try {
      // L·∫•y h√†ng ƒë·ª£i ph√°t nh·∫°c c·ªßa m√°y ch·ªß t·ª´ client
      const queue = client.player.getQueue(interaction.guild.id);

      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ h√†ng ƒë·ª£i ho·∫∑c kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t
      if (!queue || !queue.playing) {
        return interaction.reply({ content: `‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t !!` }).catch(console.error);
      }

      // L·∫•y th·ªùi gian t·ª´ input c·ªßa ng∆∞·ªùi d√πng
      const timeString = interaction.options.getString("time");
      const position = getSeconds(timeString);

      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa th·ªùi gian
      if (isNaN(position) || position < 0) {
        return interaction.reply({ content: `Th·ªùi gian kh√¥ng h·ª£p l·ªá!` }).catch(console.error);
      }

      // Tua nh·∫°c ƒë·∫øn th·ªùi gian c·ª• th·ªÉ
      queue.seek(position);

      // T·∫°o embed th√¥ng b√°o cho ng∆∞·ªùi d√πng
      const rewindEmbed = new EmbedBuilder()
        .setColor('#3498db')
        .setAuthor({
          name: 'ƒê√£ tua nh·∫°c ƒë·∫øn th·ªùi gian c·ª• th·ªÉ',
          iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238866505786200074/play-button.png?ex=6640d7d8&is=663f8658&hm=e5ffdd081024c0cac99ab17b9fc36479a6b0e7d5a44912dc557930ac78f6e7bd&',
          url: 'https://discord.gg/Na6FFYMPW6'
        })
        .setDescription(`‚è™ *ƒê√£ tua b√†i h√°t v·ªÅ th·ªùi gian* **${timeString}**. *Nghe nh·∫°c vui v·∫ª^^üçí*`)
        .setFooter({text: 'Made By Cherry' })
        .setTimestamp();

      // G·ª≠i embed v·ªÅ cho ng∆∞·ªùi d√πng
      interaction.reply({ embeds: [rewindEmbed] }).catch(console.error);
    } catch (e) {
      // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
      console.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh Rewind:', error);
      // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng v·ªõi th√¥ng b√°o l·ªói
      interaction.reply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh n√†y!', ephemeral: true }).catch(console.error);
    }
  },
};

// H√†m chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ chu·ªói th√†nh gi√¢y
function getSeconds(str) {
  if (!str) {
    return 0;
  }

  const parts = str.split(':');
  let seconds = 0;
  let multiplier = 1;

  while (parts.length > 0) {
    seconds += multiplier * parseInt(parts.pop(), 10);
    multiplier *= 60;
  }

  return seconds;
}
