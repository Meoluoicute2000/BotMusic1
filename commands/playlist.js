const { ApplicationCommandOptionType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require('../mongoDB');

module.exports = {
  name: "playlist",
  description: "T·∫°o m·ªôt danh s√°ch Playlist √¢m nh·∫°c.",
  options: [
    {
      // T√πy ch·ªçn "create" ƒë·ªÉ t·∫°o m·ªõi m·ªôt playlist
      name: "create",
      description: "T·∫°o Playlist.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "name",
          description: "ƒê·∫∑t t√™n cho Playlist ƒë√≥.",
          type: ApplicationCommandOptionType.String,
          required: true
        },
        {
          name: "public",
          description: "ƒê·ªÉ c√¥ng khai Playlist hay kh√¥ng? True Or False.",
          type: ApplicationCommandOptionType.Boolean,
          required: true
        }
      ]
    },
    {
      // T√πy ch·ªçn "delete" ƒë·ªÉ x√≥a m·ªôt playlist
      name: "delete",
      description: "B·∫°n mu·ªën x√≥a Playlist n√†y ƒëi ch·ª©?",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "name",
          description: "Vi·∫øt Playlist m√† b·∫°n mu·ªën x√≥a.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
    {
      // T√πy ch·ªçn "add-music" ƒë·ªÉ th√™m m·ªôt b√†i h√°t v√†o playlist
      name: "add-music",
      description: "Th√™m b√†i nh·∫°c v√†o Playlist.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "playlist-name",
          description: "Vi·∫øt t√™n Playlist ƒë√≥.",
          type: ApplicationCommandOptionType.String,
          required: true
        },
        {
          name: "name",
          description: "Vi·∫øt t√™n b√†i h√°t ho·∫∑c d√°n link ƒë∆∞·ªùng d·∫´n.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
    {
      // T√πy ch·ªçn "delete-music" ƒë·ªÉ x√≥a m·ªôt b√†i h√°t kh·ªèi playlist
      name: "delete-music",
      description: "Cho ph√©p b·∫°n x√≥a b√†i h√°t kh·ªèi Album.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "playlist-name",
          description: "Vi·∫øt t√™n Playlist ƒë√≥.",
          type: ApplicationCommandOptionType.String,
          required: true
        },
        {
          name: "name",
          description: "Vi·∫øt t√™n b√†i h√°t ƒë√≥.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
    {
      // T√πy ch·ªçn "song" ƒë·ªÉ xem danh s√°ch b√†i h√°t trong playlist
      name: "song",
      description: "Xem danh s√°ch b√†i h√°t trong Playlist.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "name",
          description: "Vi·∫øt t√™n Playlist ƒë√≥.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
    {
      // T√πy ch·ªçn "lists" ƒë·ªÉ xem t·∫•t c·∫£ c√°c playlist
      name: "lists",
      description: "Xem t·∫•t c·∫£ c√°c Playlist.",
      type: ApplicationCommandOptionType.Subcommand,
      options: []
    },
    {
      // T√πy ch·ªçn "top" ƒë·ªÉ xem playlist ph·ªï bi·∫øn nh·∫•t
      name: "top",
      description: "Playlist ph·ªï bi·∫øn nh·∫•t.",
      type: ApplicationCommandOptionType.Subcommand,
      options: []
    }
  ],
  permissions: "0x0000000000000800",
  run: async (client, interaction) => {
    try {
      // L·∫•y subcommand m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
      let stp = interaction.options.getSubcommand()
      // X·ª≠ l√Ω khi subcommand l√† "create"
      if (stp === "create") {
        // L·∫•y t√™n v√† c√¥ng khai c·ªßa playlist t·ª´ ng∆∞·ªùi d√πng
        let name = interaction.options.getString('name')
        let public = interaction.options.getBoolean('public')
        // Ki·ªÉm tra xem t√™n playlist ƒë√£ ƒë∆∞·ª£c nh·∫≠p hay ch∆∞a
        if (!name) return interaction.reply({ content: '‚ö†Ô∏è Nh·∫≠p t√™n Playlist m√† b·∫°n mu·ªën t·∫°o!', ephemeral: true }).catch(e => { })

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n s·ªë playlist ƒë∆∞·ª£c t·∫°o ch∆∞a
        const userplaylist = await db.playlist.findOne({ userID: interaction.user.id })

        const playlist = await db.playlist.find().catch(e => { })
        if (playlist?.length > 0) {
          // Ki·ªÉm tra xem playlist ƒë√£ t·ªìn t·∫°i ch∆∞a
          for (let i = 0; i < playlist.length; i++) {
            if (playlist[i]?.playlist?.filter(p => p.name === name)?.length > 0) {
              return interaction.reply({ content: '‚≠ï Playlist n√†y ƒë√£ t·ªìn t·∫°i.', ephemeral: true }).catch(e => { })
            }
          }
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n s·ªë playlist ƒë∆∞·ª£c t·∫°o ch∆∞a
        if (userplaylist?.playlist?.length >= client.config.playlistSettings.maxPlaylist) return interaction.reply({ content: 'üö´ ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n Playlist.', ephemeral: true }).catch(e => { })

        // T·∫°o embed th√¥ng b√°o cho vi·ªác t·∫°o playlist th√†nh c√¥ng
        const creatingAlbumEmbed = new EmbedBuilder()
          .setColor('#0099ff')
          .setTitle('T·∫°o Playlist')
          .setDescription(`üçíCh√∫c m·ª´ng <@${interaction.member.id}> ƒë√£ t·∫°o th√†nh c√¥ng 1 Playlist.`)
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();

        // G·ª≠i embed th√¥ng b√°o
        await interaction.reply({
          content: '',
          embeds: [creatingAlbumEmbed]
        }).catch(e => {
          // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
          console.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán c√°c l·ªánh Playlist', error);
        });

        // C·∫≠p nh·∫≠t th√¥ng tin trong database ƒë·ªÉ l∆∞u tr·ªØ playlist c·ªßa ng∆∞·ªùi d√πng
        await db.playlist.updateOne({ userID: interaction.user.id }, {
          $push: {
            playlist: {
              name: name,
              author: interaction.user.id,
              authorTag: interaction.user.tag,
              public: public,
              plays: 0,
              createdTime: Date.now()
            }
          }
        }, { upsert: true }).catch(e => { })

        // T·∫°o embed th√¥ng b√°o cho vi·ªác t·∫°o playlist th√†nh c√¥ng
        const albumCreatedEmbed = new EmbedBuilder()
  .setColor('#00ff00')
          .setAuthor({
            name: 'Playlist ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.',
            iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867547152060456/verify.png?ex=6640d8d0&is=663f8750&hm=e10391646957775a528d8b3baa273fceab1f2813b231333d93d2664102839058&',
            url: 'https://discord.gg/Na6FFYMPW6'
          })
  .setDescription(`üçíCh√∫c m·ª´ng <@${interaction.member.id}> ƒë√£ t·∫°o th√†nh c√¥ng 1 Playlist!`)
  .setFooter({ text: 'Made By Cherry' })
  .setTimestamp();

// Ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn t·∫°o th√†nh c√¥ng Playlist
await interaction.editReply({
  content: '',
  embeds: [albumCreatedEmbed]
}).catch(e => {
  // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
  console.error('L·ªói khi ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn c·ªßa Playlist', error);
});
      }
      // X·ª≠ l√Ω khi subcommand l√† "delete"
      if (stp === "delete") {
        // L·∫•y t√™n playlist t·ª´ ng∆∞·ªùi d√πng
        let name = interaction.options.getString('name')
        // Ki·ªÉm tra xem t√™n playlist ƒë√£ ƒë∆∞·ª£c nh·∫≠p hay ch∆∞a
        if (!name) return interaction.reply({ content: '‚ö†Ô∏è Nh·∫≠p Playlist m√† b·∫°n ƒë√£ t·∫°o!', ephemeral: true }).catch(e => { })

        // Ki·ªÉm tra xem playlist c√≥ t·ªìn t·∫°i ch∆∞a
        const playlist = await db.playlist.findOne({ userID: interaction.user.id }).catch(e => { })
        if (!playlist?.playlist?.filter(p => p.name === name).length > 0) return interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y Playlist ƒë√≥.', ephemeral: true }).catch(e => { })

        // C·∫≠p nh·∫≠t th√¥ng tin trong database v·ªÅ playlist c·ªßa ng∆∞·ªùi d√πng
        const music_filter = playlist?.musics?.filter(m => m.playlist_name === name)
        if (music_filter?.length > 0){
          await db.playlist.updateOne({ userID: interaction.user.id }, {
            $pull: {
              musics: {
                playlist_name: name
              }
            }
          }).catch(e => { })
        }

      // G·ª≠i th√¥ng b√°o cho vi·ªác x√≥a playlist th√†nh c√¥ng
      const deletingAlbumEmbed = new EmbedBuilder()
          .setColor('#0099ff')
          .setTitle('X√≥a Playlist')
          .setDescription(`üçíCh·ªãu r·ªìi <@${interaction.member.id}> ƒë√£ x√≥a 1 Playlist!`)
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();
          

        await interaction.reply({
          content: '',
          embeds: [deletingAlbumEmbed]
        }).catch(e => {
          // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
          console.error('L·ªói g·ª≠i tin nh·∫Øn c·ªßa l·ªánh Playlist', error);
        });

        // X√≥a playlist t·ª´ database
        await db.playlist.updateOne({ userID: interaction.user.id }, {
          $pull: {
            playlist: {
              name: name
            }
          }
        }, { upsert: true }).catch(e => { })

        // G·ª≠i th√¥ng b√°o cho vi·ªác x√≥a playlist th√†nh c√¥ng
         const albumDeleteEmbed = new EmbedBuilder()
  .setColor('#00ff00')
          .setAuthor({
            name: 'X√≥a Playlist th√†nh c√¥ng',
            iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867547152060456/verify.png?ex=6640d8d0&is=663f8750&hm=e10391646957775a528d8b3baa273fceab1f2813b231333d93d2664102839058&',
            url: 'https://discord.gg/Na6FFYMPW6'
          })
  .setDescription(`üçíCh·ªãu r·ªìi <@${interaction.member.id}> ƒë√£ x√≥a th√†nh c√¥ng Playlist!`)
  .setFooter({ text: 'Made By Cherry' })
  .setTimestamp();

// Ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn ember
await interaction.editReply({
  content: '',
  embeds: [albumDeleteEmbed]
}).catch(e => {
  // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
  console.error('L·ªói ch·ªânh s·ª≠a tin nh·∫Øn c·ªßa l·ªánh Playlist', error);
});
      }
      // X·ª≠ l√Ω khi subcommand l√† "add-music"
      if (stp === "add-music") {
        // L·∫•y t√™n playlist v√† t√™n b√†i h√°t t·ª´ ng∆∞·ªùi d√πng
        let name = interaction.options.getString('name')
        if (!name) return interaction.reply({ content: 'üéÄ Nh·∫≠p t√™n b√†i h√°t t√¨m ki·∫øm!', ephemeral: true }).catch(e => { })
        let playlist_name = interaction.options.getString('playlist-name')
        // Ki·ªÉm tra xem t√™n playlist v√† t√™n b√†i h√°t ƒë√£ ƒë∆∞·ª£c nh·∫≠p hay ch∆∞a
        if (!playlist_name) return interaction.reply({ content: '‚ö†Ô∏è Nh·∫≠p t√™n Playlist mu·ªën th√™m nh·∫°c!', ephemeral: true }).catch(e => { })

        // T√¨m playlist trong database v√† th√™m nh·∫°c
        const playlist = await db.playlist.findOne({ userID: interaction.user.id }).catch(e => { })
        if (!playlist?.playlist?.filter(p => p.name === playlist_name).length > 0) return interaction.reply({ content: 'Th√™m nh·∫°c th√†nh c√¥ng!', ephemeral: true }).catch(e => { })

        // T·∫°o m·ªôt document m·ªõi trong database v√† c·∫≠p nh·∫≠t playlist c·ªßa ng∆∞·ªùi d√πng
        let max_music = client.config.playlistSettings.maxMusic
        if (playlist?.musics?.filter(m => m.playlist_name === playlist_name).length > max_music) return interaction.reply({ content: "ƒê√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n b√†i h√°t trong Playlist".replace("{max_music}", max_music), ephemeral: true }).catch(e => { })
        let res 
        try{
          // Ki·∫øm tra b√†i h√°t c√≥ h·ª£p l·ªá hay kh√¥ng
          res = await client.player.search(name, {
            member: interaction.member,
            textChannel: interaction.channel,
            interaction
          })
        } catch (e) {
          return interaction.reply({ content: '‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y', ephemeral: true }).catch(e => { })
        }
        if (!res || !res.length || !res.length > 1) return interaction.reply({ content: `‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y `, ephemeral: true }).catch(e => { })
        
        // G·ª≠i th√¥ng b√°o cho vi·ªác th√™m b√†i h√°t v√†o playlist th√†nh c√¥ng
        const loadingembed = new EmbedBuilder()
        .setColor('#0099ff')
        .setAuthor({
          name: 'B√†i h√°t ƒë√£ th√™m v√†o Playlist!',
          iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867547152060456/verify.png?ex=6640d8d0&is=663f8750&hm=e10391646957775a528d8b3baa273fceab1f2813b231333d93d2664102839058&',
          url: 'https://discord.gg/Na6FFYMPW6'
        })
        .setDescription(`üçíCh√∫c m·ª´ng <@${interaction.member.id}>, b·∫°n ƒë√£ th√™m b√†i h√°t th√†nh c√¥ng!`)
        .setFooter({ text: 'Made By Cherry' })
        .setTimestamp();
        await interaction.reply({
  content: '',
  embeds: [ loadingembed ] 
}).catch(e => {
  // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
  console.error('L·ªói khi g·ª≠i tin nh·∫Øn c·ªßa l·ªánh Playlist', error);
});
      //Ki·ªÉm tra b√†i h√°t ƒë√£ c√≥ trong Playlist ch∆∞a
        const music_filter = playlist?.musics?.filter(m => m.playlist_name === playlist_name && m.music_name === res[0]?.name)
        if (music_filter?.length > 0) return interaction.editReply({ content: ' ‚ùå B√†i h√°t ƒë√£ c√≥ trong Playlist', ephemeral: true }).catch(e => { })

        // T·∫°o m·ªôt document m·ªõi trong database ƒë·ªÉ l∆∞u tr·ªØ b√†i h√°t v√†o playlist c·ªßa ng∆∞·ªùi d√πng
        await db.playlist.updateOne({ userID: interaction.user.id }, {
          $push: {
            musics: {
              playlist_name: playlist_name,
              music_name: res[0]?.name,
              music_url: res[0]?.url, 
              saveTime: Date.now()
            }
          }
        }, { upsert: true }).catch(e => { })

        await interaction.editReply({ content: `<@${interaction.member.id}>, \`${res[0]?.name}\` ` }).catch(e => { })
      }

      // X·ª≠ l√Ω khi subcommand l√† "delete-music"
      if (stp === "delete-music") {
        // L·∫•y t√™n playlist v√† t√™n b√†i h√°t t·ª´ ng∆∞·ªùi d√πng
        let name = interaction.options.getString('name')
        if (!name) return interaction.reply({ content: '‚ö†Ô∏è Nh·∫≠p b√†i h√°t b·∫°n t√¨m ki·∫øm!', ephemeral: true }).catch(e => { })
        let playlist_name = interaction.options.getString('playlist-name')
        if (!playlist_name) return interaction.reply({ content: '‚ö†Ô∏è Nh·∫≠p t√™n Playlist c·∫ßn x√≥a b√†i h√°t!', ephemeral: true }).catch(e => { })

        // Ki·ªÉm tra xem t√™n playlist v√† t√™n b√†i h√°t ƒë√£ ƒë∆∞·ª£c nh·∫≠p hay ch∆∞a
        const playlist = await db.playlist.findOne({ userID: interaction.user.id }).catch(e => { })
        if (!playlist?.playlist?.filter(p => p.name === playlist_name).length > 0) return interaction.reply({ content: '‚ùå Kh√¥ng th·∫•y Playlist!', ephemeral: true }).catch(e => { })

        //Ki·ªÉm tra xem playlist c√≥ b√†i h√°t ƒë√≥ hay ch∆∞a
        const music_filter = playlist?.musics?.filter(m => m.playlist_name === playlist_name && m.music_name === name)
        if (!music_filter?.length > 0) return interaction.reply({ content: `‚ùå Kh√¥ng th·∫•y b√†i h√°t!`, ephemeral: true }).catch(e => { })

         const deletingSongEmbed = new EmbedBuilder()
          .setColor('#0099ff')
          .setTitle('X√≥a b·ªè b√†i h√°t.')
          .setDescription(`üçí∆† k√¨a <@${interaction.member.id}> ƒë√£ x√≥a 1 b√†i h√°t trong Playlist!`)
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();


        await interaction.reply({
          content: '',
          embeds: [deletingSongEmbed]
        }).catch(e => {
          // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
          console.error('L·ªói g·ª≠i tin nh·∫Øn c·ªßa l·ªánh Playlist', error);
        });

        // T√¨m playlist trong database ƒë·ªÉ x√≥a b√†i h√°t c·∫ßn g·ª°
        await db.playlist.updateOne({ userID: interaction.user.id }, {
          $pull: {
            musics: {
              playlist_name: playlist_name,
              music_name: name
            }
          }
        }, { upsert: true }).catch(e => { })

        // G·ª≠i th√¥ng b√°o cho vi·ªác x√≥a b√†i h√°t kh·ªèi playlist th√†nh c√¥ng
         const songDeleteEmbed = new EmbedBuilder()
  .setColor('#00ff00')
          .setAuthor({
            name: 'X√≥a b√†i h√°t th√†nh c√¥ng!',
            iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867547152060456/verify.png?ex=6640d8d0&is=663f8750&hm=e10391646957775a528d8b3baa273fceab1f2813b231333d93d2664102839058&',
            url: 'https://discord.gg/Na6FFYMPW6'
          })
  .setDescription(`üçí∆† k√¨a <@${interaction.member.id}>, b·∫°n ƒë√£ x√≥a nh·∫°c th√†nh c√¥ng!`)
  .setFooter({ text: 'Made By Cherry' })
  .setTimestamp();

// Ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn ember
await interaction.editReply({
  content: '',
  embeds: [songDeleteEmbed]
}).catch(e => {
  // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
  console.error('L·ªói ch·ªânh s·ª≠a tin nh·∫Øn c·ªßa l√™nh Playlist ', error);
});
      }
      // X·ª≠ l√Ω khi subcommand l√† "song"
      if (stp === "song") {
        // L·∫•y t√™n playlist v√† t√™n b√†i h√°t t·ª´ ng∆∞·ªùi d√πng
        let name = interaction.options.getString('name')
        if (!name) return interaction.reply({ content: 'üîç Nh·∫≠p t√™n Playlist ƒë·ªÉ t√¨m!', ephemeral: true }).catch(e => { })
        // Ki·ªÉm tra playlist ng∆∞·ªùi d√πng
        let trackl
        // T√¨m ki·∫øm b√†i h√°t ƒë√≥ t·ª´ database ng∆∞·ªùi d√πng
        const playlist = await db.playlist.find().catch(e => { })
        if (!playlist?.length > 0) return interaction.reply({ content: `üö´ Kh√¥ng c√≥ t√™n Playlist!`, ephemeral: true }).catch(e => { })
        // Ki·ªÉm tra th√¥ng tin b√†i h√°t trong playlist
        let arr = 0
        for (let i = 0; i < playlist.length; i++) {
          if (playlist[i]?.playlist?.filter(p => p.name === name)?.length > 0) {

            let playlist_owner_filter = playlist[i].playlist.filter(p => p.name === name)[0].author
            let playlist_public_filter = playlist[i].playlist.filter(p => p.name === name)[0].public
            // Ki·ªÉm tra quy·ªÅn c·ªßa playlist ng∆∞·ªùi d√πng
            if (playlist_owner_filter !== interaction.member.id) {
              if (playlist_public_filter === false) {
                return interaction.reply({ content: 'üö´ B·∫°n kh√¥ng th·ªÉ ph√°t Playlist n√†y!', ephemeral: true }).catch(e => { })
              }
            } 
            // Ki·ªÉm tra b√†i h√°t c√≥ t·ªìn t·∫°i hay ch∆∞a
            trackl = await playlist[i]?.musics?.filter(m => m.playlist_name === name)
            if (!trackl?.length > 0) return interaction.reply({ content: 'üò∫ Playlist n√†y ch∆∞a c√≥ nh·∫°c, h√£y th√™m v√¥ nh√©!', ephemeral: true }).catch(e => { })
          // N·∫øu kh√¥ng c√≥ danh s√°ch playlist n√†o
          } else {
            arr++
            if (arr === playlist.length) {
              return interaction.reply({ content: '‚ùå Kh√¥ng th·∫•y Playlist n√†o!', ephemeral: true }).catch(e => { })
            }
          }
        }
        // T·∫°o c√°c n√∫t button ƒë·ªÉ t∆∞∆°ng t√°c danh s√°ch b√†i h√°t
        const backId = "emojiBack"
        const forwardId = "emojiForward"
        const backButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "‚óÄÔ∏è",
          customId: backId
        });

        const deleteButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "üö´",
          customId: "close"
        });

        const forwardButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "‚ñ∂Ô∏è",
          customId: forwardId
        });

        // Ki·ªÉm tra b√†i h√°t
        let howmuch = 8
        let page = 1
        let a = trackl.length / howmuch
        // Ki·ªÉm tra database xem playlist c√≥ b√†i h√°t n√†o ch∆∞a
        const generateEmbed = async (start) => {
          let sayƒ± = page === 1 ? 1 : page * howmuch - howmuch + 1
          const current = trackl.slice(start, start + howmuch)
          if (!current || !current?.length > 0) return interaction.reply({ content: 'üò∫ Playlist n√†y ch∆∞a c√≥ nh·∫°c, h√£y th√™m v√¥ nh√©!', ephemeral: true }).catch(e => { })
          return new EmbedBuilder()
            // Ng∆∞·ª£c l·∫°i g·ª≠i danh s√°ch b√†i h√°t trong playlist n·∫øu c√≥
            .setAuthor({
          name: 'Playlist nh·∫°c!',
          iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867000097505361/playlist.png?ex=6640d84d&is=663f86cd&hm=9ff229fb1fa12660090e59b980522a9cec8fe03e8d5ba41866530af85e13782e&',
          url: 'https://discord.gg/Na6FFYMPW6'
        })
            .setThumbnail(interaction.user.displayAvatarURL({ size: 2048, dynamic: true }))
            .setColor(client.config.embedColor) 
            .setDescription(`\n${current.map(data =>
              `\n\`${sayƒ±++}\` | [${data.music_name}](${data.music_url}) - <t:${Math.floor(data.saveTime / 1000) }:R>`
            ) }`)
            .setFooter({ text: `Trang ${page}/${Math.floor(a+1) }` })
            .setFooter({ text: 'Made By Cherry' })
            .setTimestamp();
        }

        // G·ª≠i ng∆∞·ªùi d√πng danh s√°ch b√†i h√°t trong playlist
        const canFitOnOnePage = trackl.length <= howmuch

        await interaction.reply({
          embeds: [await generateEmbed(0)],
          components: canFitOnOnePage
            ? []
            : [new ActionRowBuilder({ components: [deleteButton, forwardButton] })],
          fetchReply: true
        }).then(async Message => {
          const filter = i => i.user.id === interaction.user.id
          const collector = Message.createMessageComponentCollector({ filter, time: 30000 });

          // Ki·ªÉm tra n√∫t v√† n·∫øu nh∆∞ ng∆∞·ªùi d√πng h·ªßy l·ªánh
          let currentIndex = 0
          collector.on("collect", async (button) => {
            if (button.customId === "close") {
              collector.stop()
              return button.reply({ content: `ƒê√£ h·ªßy l·ªánh ‚ùå`, ephemeral: true }).catch(e => { })
            } else {

              if (button.customId === backId) {
                page--
              }
              if (button.customId === forwardId) {
                page++
              }

              button.customId === backId
                ? (currentIndex -= howmuch)
                : (currentIndex += howmuch)

              await interaction.editReply({
                embeds: [await generateEmbed(currentIndex)],
                components: [
                  new ActionRowBuilder({
                    components: [
                      ...(currentIndex ? [backButton] : []),
                      deleteButton,
                      ...(currentIndex + howmuch < trackl.length ? [forwardButton] : []),
                    ],
                  }),
                ],
              }).catch(e => { })
              await button.deferUpdate().catch(e => {})
            }
          })

          collector.on("end", async (button) => {
            button = new ActionRowBuilder().addComponents(
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("‚óÄÔ∏è")
                .setCustomId(backId)
                .setDisabled(true),
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("üö´")
                .setCustomId("close")
                .setDisabled(true),
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("‚ñ∂Ô∏è")
                .setCustomId(forwardId)
                .setDisabled(true))

            // T·ª± ƒë·ªông s·ª≠a tin nh·∫Øn cho g·ªçn
            const embed = new EmbedBuilder()
              .setTitle(`${name}`)
              .setThumbnail(interaction.user.displayAvatarURL({ size: 2048, dynamic: true }))
              .setColor(client.config.embedColor)
              .setDescription('T·ª± ƒë·ªông s·ª≠a ember ƒë·ªÉ tin nh·∫Øn ng·∫Øn g·ªçn! '.replace("{name}", name))
              .setFooter({ text: 'Made By Cherry' })
              .setTimestamp();
            return interaction.editReply({ embeds: [embed], components: [button] }).catch(e => { })

          })
        }).catch(e => { })

      }
      // X·ª≠ l√Ω khi subcommand l√† "list"
      if (stp === "lists") {
        // L·∫•y t√™n playlist v√† t√™n b√†i h√°t t·ª´ ng∆∞·ªùi d√πng
        const playlist = await db?.playlist?.findOne({ userID: interaction.user.id }).catch(e => { })
        if (!playlist?.playlist?.length > 0) return interaction.reply({ content: `üí¶ B·∫°n ch∆∞a t·∫°o Playlist n√†o!`, ephemeral: true }).catch(e => { })

        // Trang ƒë·∫ßu c·ªßa playplst
        let number = 1
        // G·ª≠i th√¥ng b√°o ember v·ªÅ danh s√°ch playlist
        const embed = new EmbedBuilder()
          .setAuthor({
            name: 'Danh s√°ch Playlist c·ªßa t√¥i',
            iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867000097505361/playlist.png?ex=6640d84d&is=663f86cd&hm=9ff229fb1fa12660090e59b980522a9cec8fe03e8d5ba41866530af85e13782e&',
            url: 'https://discord.gg/Na6FFYMPW6'
          })
          .setColor(client.config.embedColor)
          .setDescription(`\n${playlist?.playlist?.map(data =>
            `\n**${number++} |** \`${data.name}\` - **${playlist?.musics?.filter(m => m.playlist_name === data.name)?.length || 0}** b√†i h√°t (** ƒë√£ t·∫°o t·ª´ ** <t:${Math.floor(data.createdTime / 1000) }:R> )`
          ) }`)
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();
        return interaction.reply({ embeds: [embed] }).catch(e => { }) 

      }
      // X·ª≠ l√Ω khi subcommand l√† "top"
      if (stp === "top") {
        // Ki·ªÉm tra c√°c playlist t·ª´ database
        let playlists = await db?.playlist?.find().catch(e => { })
        if (!playlists?.length > 0) return interaction.reply({ content: 'üçí Kh√¥ng c√≥ Playlist n√†o c·∫£!', ephemeral: true }).catch(e => { })
        // Trang ƒë·∫ßu c·ªßa playlist
        let trackl = []
        playlists.map(async data => {
          data.playlist.filter(d => d.public === true).map(async d => {
            let filter = data.musics.filter(m => m.playlist_name === d.name)
            if (filter.length > 0) {
              trackl.push(d)
            }
          })
        })
        // Ki·ªÉm tra xem c√≥ playlist n√†o hay ch∆∞a
        trackl = trackl.filter(a => a.plays > 0) 

        if (!trackl?.length > 0) return interaction.reply({ content: 'üçí Kh√¥ng c√≥ Playlist n√†o c·∫£!', ephemeral: true }).catch(e => { })

        trackl = trackl.sort((a, b) => b.plays - a.plays)
        // Th√™m c√°c n√∫t ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ember
        const backId = "emojiBack"
        const forwardId = "emojiForward"
        const backButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "‚óÄÔ∏è",
          customId: backId
        });

        const deleteButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "üö´",
          customId: "close"
        });

        const forwardButton = new ButtonBuilder({
          style: ButtonStyle.Secondary,
          emoji: "‚ñ∂Ô∏è",
          customId: forwardId
        });

        // Tr√¨nh b√†y playlist sao cho ph√π h·ª£p v·ªõi ember
        let howmuch = 8
        let page = 1
        let a = trackl.length / howmuch

        // Ki·ªÉm tra xem c√≥ playlist n√†o ch∆∞a
        const generateEmbed = async (start) => {
          let sayƒ± = page === 1 ? 1 : page * howmuch - howmuch + 1
          const current = trackl.slice(start, start + howmuch)
          if (!current || !current?.length > 0) return interaction.reply({ content: `üçí Kh√¥ng c√≥ Playlist n√†o c·∫£!`, ephemeral: true }).catch(e => { })
          // G·ª≠i th√¥ng b√°o v·ªÅ Top playlist trong database ƒë∆∞·ª£c ph√°t nhi·ªÅu nh·∫•t
          return new EmbedBuilder()
            .setAuthor({
              name: 'Top nh·ªØng Playlist ƒë∆∞·ª£c ph√°t nhi·ªÅu nh·∫•t',
              iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867000097505361/playlist.png?ex=6640d84d&is=663f86cd&hm=9ff229fb1fa12660090e59b980522a9cec8fe03e8d5ba41866530af85e13782e&',
              url: 'https://discord.gg/Na6FFYMPW6'
            })
            .setThumbnail(interaction.user.displayAvatarURL({ size: 2048, dynamic: true }))
            .setColor(client.config.embedColor)
            .setDescription(`\n${current.map(data =>
              `\n**${sayƒ±++} |** \`${data.name}\` t·∫°o b·ªüi \`${data.authorTag}\` - *ƒë√£ c√≥* **${data.plays}** *l∆∞·ª£t ph√°t* (** ƒë√£ t·∫°o t·ª´ **<t:${Math.floor(data.createdTime / 1000) }:R> )`
            ) }`)
            .setFooter({ text: `Trang ${page}/${Math.floor(a+1) }` })
            .setFooter({ text: 'Made By Cherry' })
            .setTimestamp();
        }
        // Ki·ªÉm tra l·∫°i v√† g·ª≠i l·∫°i tin nh·∫Øn ember
        const canFitOnOnePage = trackl.length <= howmuch
        // Tr·∫£ l·ªùi tin nh·∫Øn ember 
        await interaction.reply({
          embeds: [await generateEmbed(0)],
          components: canFitOnOnePage
            ? []
            : [new ActionRowBuilder({ components: [deleteButton, forwardButton] })],
          fetchReply: true
        }).then(async Message => {
          const filter = i => i.user.id === interaction.user.id
          const collector = Message.createMessageComponentCollector({ filter, time: 30000 });

          // N·∫øu nh∆∞ d·ª´ng l·ªánh xem playlist
          let currentIndex = 0
          collector.on("collect", async (button) => {
            if (button.customId === "close") {
              collector.stop()
              return button.reply({ content: `ƒê√£ d·ª´ng l·ªánh üçí`, ephemeral: true }).catch(e => { })
            } else {

              if (button.customId === backId) {
                page--
              }
              if (button.customId === forwardId) {
                page++
              }

              button.customId === backId
                ? (currentIndex -= howmuch)
                : (currentIndex += howmuch)

              await interaction.editReply({
                embeds: [await generateEmbed(currentIndex)],
                components: [
                  new ActionRowBuilder({
                    components: [
                      ...(currentIndex ? [backButton] : []),
                      deleteButton,
                      ...(currentIndex + howmuch < trackl.length ? [forwardButton] : []),
                    ],
                  }),
                ],
              }).catch(e => { })
              await button.deferUpdate().catch(e => {})
            }
          })
          // Th√™m c√°c n√∫t ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ember
          collector.on("end", async (button) => {
            button = new ActionRowBuilder().addComponents(
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("‚óÄÔ∏è")
                .setCustomId(backId)
                .setDisabled(true),
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("üö´")
                .setCustomId("close")
                .setDisabled(true),
              new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setEmoji("‚ñ∂Ô∏è")
                .setCustomId(forwardId)
                .setDisabled(true))
            // T·ª± ƒë·ªông ch·ªânh s·ª≠a tin nh·∫Øn cho g·ªçn
            const embed = new EmbedBuilder()
              .setAuthor({
          name: 'Top nh·ªØng Playlist ƒë∆∞·ª£c ph√°t nhi·ªÅu nh·∫•t',
          iconURL: 'https://cdn.discordapp.com/attachments/1213421081226903552/1213422313035407360/8218-alert.gif',
          url: 'https://discord.gg/Na6FFYMPW6'
        })
              .setThumbnail(interaction.user.displayAvatarURL({ size: 2048, dynamic: true }))
              .setColor(client.config.embedColor)
              .setDescription('T·ª± ƒë·ªông s·ª≠a tin nh·∫Øn ƒë·ªÉ ember ng·∫Øn g·ªçn!')
              .setFooter({ text: 'Made By Cherry' })
              .setTimestamp();
            return interaction.editReply({ embeds: [embed], components: [button] }).catch(e => { })

          })
          
        }).catch(e => { })

      }
    } catch (e) {
      console.error(e);
      interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán c√°c l·ªánh Playlist', ephemeral: true }).catch(e => { })
    }
  }
}
