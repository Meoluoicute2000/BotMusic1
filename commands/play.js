const { ApplicationCommandOptionType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require("../mongoDB");
const { opt } = require("../config.js");

// L·∫•y thumbailUrl ·∫£nh
let selectedThumbnailURL;
module.exports.selectedThumbnailURL = selectedThumbnailURL;

module.exports = {
  name: "play",
  description: "Ph√°t nh·∫°c (M·∫∑c ƒë·ªãnh ph√°t nh·∫°c l√† YouTube)!",
  permissions: "0x0000000000000800",
  options: [{
    name: 'name',
    description: 'Nh·∫≠p t√™n nh·∫°c b·∫°n mu·ªën ph√°t.',
    type: ApplicationCommandOptionType.String,
    required: true
  }],
  voiceChannel: true,
  run: async (client, interaction) => {
    try {
      // L·∫•y t√™n b√†i h√°t t·ª´ l·ª±a ch·ªçn
      const name = interaction.options.getString('name');
      // Ki·ªÉm tra t√™n b√†i h√°t xem c√≥ h·ª£p l·ªá hay kh√¥ng
      if (!name) return interaction.reply({ content: `‚ùå Nh·∫≠p t√™n b√†i h√°t h·ª£p l·ªá.`, ephemeral: true }).catch(e => { });

      let res;
      try {
        // Kh·ªüi ƒë·ªông t√¨m ki·∫øm d·ª±a v√†o t√™n
        res = await client.player.search(name, {
          member: interaction.member,
          textChannel: interaction.channel,
          interaction
        });
      } catch (e) {
        // Tr·∫£ v·ªÅ n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        return interaction.editReply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£` }).catch(e => { });
      }

      // Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ n√†o kh√¥ng
      if (!res || !res.length || !res.length > 1) return interaction.reply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£`, ephemeral: true }).catch(e => { });

      // T·∫°o Embed ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
      const embed = new EmbedBuilder();
      embed.setColor(client.config.embedColor);
      embed.setFooter({ text: 'Made By Cherry' });
      embed.setTitle(`üîç [| **Thanh T√¨m Ki·ªÉm:** *${name}* |]`);
      embed.setTimestamp();

      // L·∫•y danh s√°ch c√°c b√†i h√°t t√¨m ƒë∆∞·ª£c (t·ªëi ƒëa 10 b√†i h√°t)
      const maxTracks = res.slice(0, 10);

      // T·∫°o c√°c n√∫t ch·ªçn b√†i h√°t
      let track_button_creator = maxTracks.map((song, index) => {
        return new ButtonBuilder()
          .setLabel(`${index + 1}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId(`${index + 1}`);
      });

      // Ph√¢n chia n√∫t ch·ªçn th√†nh c√°c h√†ng
      let buttons1;
      let buttons2;
      if (track_button_creator.length > 10) {
        buttons1 = new ActionRowBuilder().addComponents(track_button_creator.slice(0, 5));
        buttons2 = new ActionRowBuilder().addComponents(track_button_creator.slice(5, 10));
      } else {
        if (track_button_creator.length > 5) {
          buttons1 = new ActionRowBuilder().addComponents(track_button_creator.slice(0, 5));
          buttons2 = new ActionRowBuilder().addComponents(track_button_creator.slice(5, Number(track_button_creator.length)));
        } else {
          buttons1 = new ActionRowBuilder().addComponents(track_button_creator);
        }
      } 
      
      // T·∫°o n√∫t h·ªßy
      let cancel = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setLabel("H·ªßy")
          .setStyle(ButtonStyle.Danger)
          .setCustomId('cancel')
      );

      // Thi·∫øt l·∫≠p th√¥ng ƒëi·ªáp v√† n√∫t ch·ªçn trong Embed
      embed.setDescription(`${maxTracks.map((song, i) => `**${i + 1}**. [${song.name}](${song.url}) | \`T√°c gi·∫£: ${song.uploader.name}\``).join('\n')}\n\n‚ú®Ch·ªçn m·ªôt b√†i h√°t t·ª´ b√™n d∆∞·ªõi!!`);
      embed.setFooter({ text: 'Made By Cherry' });
      embed.setTimestamp();

      // T·∫°o m√£ ƒë·ªÉ g·ª≠i Embed v√† c√°c n√∫t 
      let code;
      if (buttons1 && buttons2) {
        code = { embeds: [embed], components: [buttons1, buttons2, cancel] };
      } else {
        code = { embeds: [embed], components: [buttons1, cancel] };
      }

      // G·ª≠i Embed v√† c√°c n√∫t v√† x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng
      interaction.reply(code).then(async Message => {
        const filter = i => i.user.id === interaction.user.id;
        let collector = await Message.createMessageComponentCollector({ filter, time: 30000 });

        collector.on('collect', async (button) => {
          switch (button.customId) {
            case 'cancel': {
              // Ng∆∞·ªùi d√πng h·ªßy t√¨m ki·∫øm, d·ª´ng thu th·∫≠p
              embed.setDescription(`T√¨m ki·∫øm b·ªã gi√°n ƒëo·∫°n`);
              await interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });
              return collector.stop();
            }
            break;
            default: {
              // Ng∆∞·ªùi d√πng ch·ªçn m·ªôt b√†i h√°t ƒë·ªÉ ph√°t
              selectedThumbnailURL = maxTracks[Number(button.customId) - 1].thumbnail;
              embed.setThumbnail(selectedThumbnailURL);
              embed.setDescription(`## *ƒêang ph√°t b√†i h√°t:* [${res[Number(button.customId) - 1].name}](${res[Number(button.customId) - 1].url})`);
              await interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });
              try {
                // Ph√°t b√†i h√°t ƒë∆∞·ª£c ch·ªçn
                await client.player.play(interaction.member.voice.channel, res[Number(button.customId) - 1].url, {
                  member: interaction.member,
                  textChannel: interaction.channel,
                  interaction
                });
              } catch (e) {
                // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng th·ªÉ ph√°t b√†i h√°t
                await interaction.editReply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£!`, ephemeral: true }).catch(e => { });
              }
              return collector.stop();
            }
          }
        });
        // S·ª≠a tin nh·∫Øn ember cho ng·∫Øn g·ªçn
        collector.on('end', (msg, reason) => {
          if (reason === 'time') {
            embed.setDescription("**üò∫ Ph√°t hi·ªán ch∆∞a l·ª±a ch·ªçn nh·∫°c sau 30 gi√¢y.**\n **üçí T·ª± ƒë·ªông s·ª≠a tin nh·∫Øn ƒë·ªÉ ember ng·∫Øn g·ªçn!**");
            embed.setFooter({ text: 'Made By Cherry' });
            embed.setTimestamp();
            return interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });
          }
        });
      }).catch(e => { });
    } catch (e) {
      // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v√† ghi log
      console.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh Play:', error);
      // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng v·ªõi th√¥ng b√°o l·ªói
      interaction.reply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh n√†y!', ephemeral: true }).catch(console.error);
    }
  },
};
