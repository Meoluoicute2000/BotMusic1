const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const db = require("../mongoDB");

module.exports = {
  name: "playsong",
  description: "Ph√°t nh·∫°c",
  permissions: "0x0000000000000800",
  options: [
    {
      name: "normal",
      description: "M·ªü nh·∫°c t·ª´ c√°c n·ªÅn t·∫£ng kh√°c - H·ªó tr·ª£ Spotify, Soundcloud, Deezer, Youtube.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "name",
          description: "Vi·∫øt t√™n nh·∫°c c·ªßa b·∫°n - H·ªó tr·ª£ d√°n link.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
    {
      name: "playlist",
      description: "Ph√°t danh s√°ch Playlist c·ªßa b·∫°n.",
      type: ApplicationCommandOptionType.Subcommand,
      options: [
        {
          name: "name",
          description: "Vi·∫øt t√™n danh s√°ch ph√°t b·∫°n ƒë√£ t·∫°o.",
          type: ApplicationCommandOptionType.String,
          required: true
        }
      ]
    },
  ],
  voiceChannel: true,
  run: async (client, interaction) => {
    try {
      let stp = interaction.options.getSubcommand();

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ch·ªçn ph√°t playlist hay b√†i nh·∫°c th√¥ng th∆∞·ªùng
      if (stp === "playlist") {
        let playlistw = interaction.options.getString('name');
        let playlist = await db?.playlist?.find().catch(e => { });
        // Ki·ªÉm tra xem c√≥ playlist n√†o t·ªìn t·∫°i kh√¥ng
        if (!playlist?.length > 0) return interaction.reply({ content: `‚ùå Kh√¥ng c√≥ Playlist!`, ephemeral: true }).catch(e => { });

        let arr = 0;
        // Duy·ªát qua t·ª´ng playlist ƒë·ªÉ t√¨m playlist ƒë∆∞·ª£c ch·ªçn
        for (let i = 0; i < playlist.length; i++) {
          if (playlist[i]?.playlist?.filter(p => p.name === playlistw)?.length > 0) {
            let playlist_owner_filter = playlist[i].playlist.filter(p => p.name === playlistw)[0].author;
            let playlist_public_filter = playlist[i].playlist.filter(p => p.name === playlistw)[0].public;

            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu playlist
            if (playlist_owner_filter !== interaction.member.id) {
              if (playlist_public_filter === false) {
                return interaction.reply({ content: `‚ùå Kh√¥ng c√≥ quy·ªÅn ph√°t Playlist!`, ephemeral: true }).catch(e => { });
              }
            }

            const music_filter = playlist[i]?.musics?.filter(m => m.playlist_name === playlistw);
            if (!music_filter?.length > 0) return interaction.reply({ content: `Kh√¥ng c√≥ t√™n nh·∫°c n√†o nh∆∞ v·∫≠y!`, ephemeral: true }).catch(e => { });

            // Hi·ªÉn th·ªã embed th√¥ng b√°o ƒëang t·∫£i playlist
            const listembed = new EmbedBuilder()
              .setTitle('ƒêang t·∫£i Playlist ƒë√£ ch·ªçn')
              .setAuthor({
                name: 'Th√™m Playlist v√†o h√†ng ch·ªù!',
                iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238866444482121748/diaquay.gif?ex=6640d7c9&is=663f8649&hm=40ade926b4b3a1b3bcfdadb02e1d0dbacec99f094542ae81341b4a24e03ef77f&', 
                url: 'https://discord.gg/Na6FFYMPW6'
              })
              .setColor('#FF0000')
              .setDescription('**Chu·∫©n b·ªã ph√°t nh·∫°c r·ªìiüçí!**')
              .setFooter({ text: 'Made By Cherry' })
              .setTimestamp();
            interaction.reply({ content : '', embeds: [listembed] }).catch(e => { });

            // L·∫•y danh s√°ch c√°c b√†i h√°t t·ª´ playlist
            let songs = [];
            music_filter.map(m => songs.push(m.music_url));

            // T·∫°o playlist t√πy ch·ªânh v√† ph√°t nh·∫°c t·ª´ playlist ƒë√≥
            setTimeout(async () => {
              const playl = await client?.player?.createCustomPlaylist(songs, {
                member: interaction.member,
                properties: { name: playlistw, source: "custom" },
                parallel: true
              });

              // Embed th√¥ng b√°o ƒë√£ th√™m playlist v√†o h√†ng ch·ªù
              const qembed = new EmbedBuilder()
                .setAuthor({
                  name: 'Th√™m Playlist v√†o h√†ng ch·ªù!',
                  iconURL: 'https://cdn.discordapp.com/attachments/1238866275363721226/1238867547152060456/verify.png?ex=6640d8d0&is=663f8750&hm=e10391646957775a528d8b3baa273fceab1f2813b231333d93d2664102839058&', 
                  url: 'https://discord.gg/Na6FFYMPW6'
                })
                .setColor('#14bdff')
                .setFooter({ text: 'S·ª≠ d·ª•ng /queue ƒë·ªÉ ki·ªÉm tra h√†ng ch·ªù.' })
                .setFooter({ text: 'Made By Cherry' })
                .setTimestamp();

              await interaction.editReply({ content: '',embeds: [qembed] }).catch(e => {
                  console.error('L·ªói tr·∫£ l·ªùi', e);
              });

              try {
                await client.player.play(interaction.member.voice.channel, playl, {
                  member: interaction.member,
                  textChannel: interaction.channel,
                  interaction
                });
              } catch (e) {
                await interaction.editReply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c t√¨m th·∫•y!!`, ephemeral: true }).catch(e => { });
              }

              // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£t ph√°t c·ªßa playlist
              playlist[i]?.playlist?.filter(p => p.name === playlistw).map(async p => {
                await db.playlist.updateOne({ userID: p.author }, {
                  $pull: {
                    playlist: {
                      name: playlistw
                    }
                  }
                }, { upsert: true }).catch(e => { });

                await db.playlist.updateOne({ userID: p.author }, {
                  $push: {
                    playlist: {
                      name: p.name,
                      author: p.author,
                      authorTag: p.authorTag,
                      public: p.public,
                      plays: Number(p.plays) + 1,
                      createdTime: p.createdTime
                    }
                  }
                }, { upsert: true }).catch(e => { });
              });
            }, 3000);
          } else {
            arr++;
            if (arr === playlist.length) {
              return interaction.reply({ content: `‚ùå Kh√¥ng c√≥ Playlist n√†o ·ªü ƒë√¢y!`, ephemeral: true }).catch(e => { });
            }
          }
        }
      }

      // N·∫øu ng∆∞·ªùi d√πng ch·ªçn ph√°t b√†i nh·∫°c th√¥ng th∆∞·ªùng
      if (stp === "normal") {
        const name = interaction.options.getString('name');
        if (!name) {
          return interaction.reply({ content: '‚ñ∂Ô∏è Cung c·∫•p vƒÉn b·∫£n ho·∫∑c li√™n k·∫øt', ephemeral: true }).catch(e => {});
        }

        // Embed th√¥ng b√°o ƒëang t√¨m ki·∫øm b√†i nh·∫°c
        const embed = new EmbedBuilder()
          .setColor('#FF0000')
          .setDescription('**## üçí ƒêang t√¨m ki·∫øm b·∫£n nh·∫°c b·∫°n c·∫ßn nghe. . . .**')
          .setFooter({ text: 'Made By Cherry' })
          .setTimestamp();
        await interaction.reply({ embeds: [embed] }).catch(e => {});

        // Ph√°t b√†i nh·∫°c
        try {
          await client.player.play(interaction.member.voice.channel, name, {
            member: interaction.member,
            textChannel: interaction.channel,
            interaction
          });
        } catch (e) {
          // Embed th√¥ng b√°o kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
          const errorEmbed = new EmbedBuilder()
            .setColor('#FF0000')
            .setDescription('‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c t√¨m th·∫•y!!')
            .setFooter({ text: 'Made By Cherry' })
            .setTimestamp();

          await interaction.editReply({ embeds: [errorEmbed], ephemeral: true }).catch(e => {});
        }
      }
    } catch (e) {
      // Ghi log l·ªói
      console.error('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán c√°c l·ªánh Playnormal:', error);
      // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng v·ªõi th√¥ng b√°o l·ªói
      interaction.reply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh n√†y!', ephemeral: true }).catch(console.error);
      
      // X·ª≠ l√Ω l·ªói v√† g·ª≠i th√¥ng b√°o
      const errorNotifer = require("../functions.js");
      errorNotifer(client, interaction, e, pint);
    }

  },
};
